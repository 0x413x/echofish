<?php

/**
 * This is the model class for table "host".
 *
 * The followings are the available columns in table 'host':
 * @property integer $id
 * @property string $ip
 * @property string $fqdn
 * @property string $short
 * @property string $description
 */
class Host extends CActiveRecord
{
	/**
	 * @return string the associated database table name
	 */
	public $ipoctet=null;
	public function tableName()
	{
		return 'host';
	}

	/**
	 * @return array validation rules for model attributes.
	 */
	public function rules()
	{
		return array(
				array('ip, fqdn', 'required'),
				array('ip', 'length', 'max'=>40),
				array('fqdn', 'length', 'max'=>255),
				array('short', 'length', 'max'=>50),
				array('description', 'safe'),
				// The following rule is used by search().
				array('id,ip, ipoctet, fqdn, short, description', 'safe', 'on'=>'search'),
		);
	}

	/**
	 * @return array relational rules.
	 */
	public function relations()
	{
		// NOTE: you may need to adjust the relation name and the related
		// class name for the relations automatically generated below.
		return array(
		);
	}

	/**
	 * @return array customized attribute labels (name=>label)
	 */
	public function attributeLabels()
	{
		return array(
				'id' => 'ID',
				'ip' => 'Ip',
				'fqdn' => 'Fqdn',
				'short' => 'Short',
				'description' => 'Description',
		);
	}

	/**
	 * Retrieves a list of models based on the current search/filter conditions.
	 *
	 * Typical usecase:
	 * - Initialize the model fields with values from filter form.
	 * - Execute this method to get CActiveDataProvider instance which will filter
	 * models according to data in model fields.
	 * - Pass data provider to CGridView, CListView or any similar widget.
	 *
	 * @return CActiveDataProvider the data provider that can return the models
	 * based on the search/filter conditions.
	 */
	public function search()
	{

		$criteria=new CDbCriteria;

		$criteria->compare('id',$this->id,true);
		$criteria->compare('ip',$this->ip,true);
		//$criteria->compare('inet_ntoa(ip)',$this->ipoctet,true);
		$withmask=explode('/',$this->ipoctet);
		$ip=self::strip_comparison($withmask[0]);
		$cmp=self::get_comparison($withmask[0]);
		if(isset($withmask[1]))
		{
			$netmask=Host::netmask($withmask[1]);
			if($netmask!==false)
			{
				$network=ip2long($ip) & ip2long($netmask);
				$criteria->compare("ip & inet_aton('$netmask')",$network);
				$criteria->compare('ip',$cmp.ip2long($ip));
			}
		}
		else
		{
			$criteria->compare('INET6_NTOA(ip)',$ip,true);
			if(ip2long($this->ipoctet)!==false)
				$criteria->compare('INET6_NTOA(ip)',$ip,false,'OR');
		}
		$criteria->compare('fqdn',$this->fqdn,true);
		$criteria->compare('short',$this->short,true);
		$criteria->compare('description',$this->description,true);
		if (Yii::app ()->user->getState ( 'pageSize', Yii::app ()->params ['defaultPageSize'] ) == 0)
			$pagination = false;
		else
			$pagination = array (
					'pageSize' => Yii::app ()->user->getState ( 'pageSize', Yii::app ()->params ['defaultPageSize'] )
			);

		return new CActiveDataProvider ( $this, array (
				'criteria' => $criteria,
				'pagination' => $pagination,
				'sort' => array (
						'attributes' => array (
								'ipoctet' => array (
										'asc' => 'INET6_NTOA(ip)',
										'desc' => 'INET6_NTOA(ip) DESC'
								),
								'*'
						)
				)
			)
		);
	}

	/**
	 * Returns the static model of the specified AR class.
	 * Please note that you should have this exact method in all your CActiveRecord descendants!
	 * @param string $className active record class name.
	 * @return Host the static model class
	 */
	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}

	public function defaultScope()
	{
		return array(
				'select'=>'*,INET6_NTOA(ip) as ipoctet',
		);
	}

	public function DNSBL()
	{
		$octet=explode('.',$this->ipoctet);
		$revip=sprintf("%d.%d.%d.%d",$octet[3],$octet[2],$octet[1],$octet[0]);
		$dnsbls=array("xbl.spamhaus.org","cbl.abuseat.org","zen.spamhaus.org", "dul.dnsbl.sorbs.net");
		foreach($dnsbl as $bl)
			$check[$bl]=gethostbyname($revip.'.'.$bl);
		return $check;
	}


	/**
	 * Resolve our IP and pupulate
	 * the remaining fields of the model
	 */
	public function resolve()
	{

		if($this->ip!==0 && $this->ip!==NULL && 
			filter_var($this->ipoctet, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4) && 
			gethostbyaddr($this->ipoctet)!==$this->ipoctet && 
			gethostbyaddr($this->ipoctet)!==false)
		{
			$this->fqdn=gethostbyaddr($this->ipoctet);
			if($this->fqdn!==false && $this->fqdn!==$this->ipoctet)
			{
				if(explode('.',$this->fqdn)!=array())
					$this->short=array_shift(explode('.',$this->fqdn));
				$this->description="Get Host by Address entry auto-generated by model at ".time();
			}
		}
		elseif($this->fqdn!='' && gethostbyname($this->fqdn)!==$this->fqdn)
		{
			$this->ipoctet=gethostbyname($this->fqdn);
			$this->ip=Yii::app()->db->createCommand('SELECT INET6_ATON(:ip)')->queryScalar(array('ip'=>$this->ipoctet));
			if($this->ip!==false && $this->fqdn!==$this->ip)
			{
				if(explode('.',$this->fqdn)!=array())
					$this->short=array_shift(explode('.',$this->fqdn));
				$this->description="Get Host by Name entry auto-generated by model at ".time();
			}
		}
	}

	
	public function beforeSave()
	{
		$binIP=Yii::app()->db->createCommand('SELECT INET6_ATON(:ip)')->queryScalar(array('ip'=>$this->ipoctet));
		if($this->isNewRecord || $this->ipoctet===NULL || $this->ip!=$binIP)
		{
			$this->ip=Yii::app()->db->createCommand('SELECT INET6_ATON(:ip)')->queryScalar(array('ip'=>$this->ip));
		}
		return parent::beforeSave();
	}

	/**
	 * convert bit masks into cidr notation netmask 
	 */
	public static function netmask($cidr=0)
	{
		$parts=explode('.',$cidr);
		if($parts[0]==$cidr && intval($cidr)>0 && intval($cidr)<=32)
			return long2ip(pow(2, 32) - pow(2, (32 - intval($cidr))));
		if(count($parts)==4)
			return $cidr;
		return false;
	}
	
	/** 
	 * strip any comparison symbols (such as <,>,=)
	 * and return the $string without it. 
	 */
	public static function strip_comparison($string)
	{
		$rep=array('<','>','=');
		return str_replace($rep,'',$string);
	}

	/**
	 * returns the comparison symbols from the string.
	 * $string comes from the search filters of the admin views.
	 * This function grabs the >,<,= and combinations such as <=,>=
	 */
	public static function get_comparison($string)
	{
		$ret="";
	
		for($i=0;$i<strlen($string);$i++)
			if( $string{$i}!='=' && $string{$i}!='<' && $string{$i}!='>')
				break;
		
		if(strlen(trim($string))==0 || $i==strlen($string))
			return "";

		return substr($string, 0,$i);
	}
	
}
