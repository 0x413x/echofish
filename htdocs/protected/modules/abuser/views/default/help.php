<?php
/* @var $this DefaultController */
$this->beginWidget('bootstrap.widgets.TbHeroUnit',array(
    'heading'=>CHtml::encode(Yii::app()->name).' Abuser Help',
)); ?>
<?php $this->endWidget();?>
<section id="abuser-module">
  <div class="page-heading">
    <h1>Abuser Module</h1>
   </div>
<p>One of the methods Echofish provides to ease the process of identifying abuse on services is through the Abuser module. Abuser is focused on extracting IP addresses from syslog messages that indicate policy violations.</p>
<p>Abuser will help you identify the source IP address of brute force attacks, of web based attacks and other details that a normal firewall or IDS will not detect. Abuser will group all incidents by their corresponding IP. Furthermore, since the Abuser module does not "expire" it allows you to identify persistent threats to your network and services.</p>
<p>In order to achieve the desired result, Abuser works with a combination of match rules and extraction rules (configured under Triggers) and -based on those rules- continuously gathers intelligence to report findings as Incidents.</p>
<p>As far as UI is concerned, Abuser consists of two parts the Triggers and the Incidents, each explained bellow.</p>
<subsection id="trigger">
<h2>Trigger</h2>

<p>Trigger is the mechanism used to detect messages that relate to policy violation (with Criteria) and determines how to extract the IP address from the message (with Action).<p>

<p>A short list of Trigger fields and their description follows:

<ul>
    <li><b>ID:</b> The id of the record.</li>
    <li>Trigger Criteria / MySQL LIKE expressions that determine whether a trigger should take action for a message.
    <ul>
	    <li><b>Facility:</b> The facility code that enables this trigger to take action. Use an RFC 5424 facility number (0-23), or "-1" for any.</li>
	    <li><b>Severity:</b> The severity level that enables this trigger to take action. Use an RFC 5424 severity level number (0-7), or "-1" for any.</li>
	    <li><b>Program:</b> The program name that enables this trigger to take action. Use "%" for any, "smtp%" for pattern or "dhcpd" for exact match.</li>
	    <li><b>Msg:</b> The message pattern that enables this trigger to take action. Use regular MySQL LIKE wildcards to specify those parts of the message that change (e.g. use "%]:%SASL%LOGIN authentication fail%" to trigger IP extraction for failed SASL login attempts)</li>
	</ul></li>
  <li>Trigger Action / Perl compatible regular expression that extracts the IP from the (Msg). These are the parameters passed to REGEXP_REPLACE() function from <a href="https://mariadb.com/kb/en/library/regexp_replace/">MariaDB REGEXP_REPLACE</a>.
	<ul>
	    <li><b>Pattern:</b> The PCRE to capture (extract) the offending IP.
      The PCRE pattern should have delimiters and include a parenthesized
      subexpression to match the location of the IP in the message. For instance,
      to extract the IP address from the following message <code>warning: unknown[95.211.100.141]: SASL LOGIN authentication failed</code>
      the pattern would look something like <code>"^.*\[(.*?)\].*$"</code>.
	    <li><b>Grouping:</b> Which grouping (number) from the pattern above are we referring to, in case multiple groupings exist withn the pattern. In most cases 1 .</li>
	    <li><b>Capture:</b> What capture are we refering to (e.g. "1").</li>
	</ul></li>
    <li><b>Description:</b> A short description (describing the policy violation e.g. "SASL brute force").</li>
    <li><b>Occurence:</b> A threshold that expresses the number of occurences (per abuser) that constitute a policy violation.</li>
    <li><b>Priority:</b> A priority assigned to the Incidents that will be generated by this trigger.</li>
</ul>
</p>
</subsection>
<subsection id="incidents">
<h2>Incidents</h2>
<p>The incidents module associates IP addresses with their corresponding trigger and the log entries that "generated" this alert. There is no point in creating your own records here, so this functionality has been disabled. Useful operations will get added as we progress.</p>
</subsection>
<subsection id="crontab">
<h2>Incident Alerts with cron</h2>
<p>You can configure cron jobs to schedule the generation and sending of email reports about incidents that hit their occurrence thresholds. <a href="https://github.com/echothrust/echofish/blob/master/INSTALL.md">INSTALL.md</a> shows how to configure a daily report, but of course the cronjob may be easily adjusted to a different schedule.</p>
<p>Example usage of cron.php is demonstrated bellow:</p>
<pre>
php echofish/htdocs/cron.php alert abuser --email=YOUR-EMAIL # Mail report with incidents that hit their threshold within the last minute.
php echofish/htdocs/cron.php alert abuser --email=YOUR-EMAIL --interval=5 # Same, but within the last 5 minutes
php echofish/htdocs/cron.php alert abuser --email=YOUR-EMAIL --interval=5 --zero=1 # same, but also zero out their counters
</pre>
</subsection>
</section>
